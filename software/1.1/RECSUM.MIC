# NOTE: PicoRAM2090 supports extended MIC file format now!
# address-prefixed op-codes ("xx:"), comments, @ as well

# 0, 1 counter; 2, 3 sum

# 2digit n value keypad input and convert to hex 

00:f08 
01:f2d 
02:ffe
03:ffd
04:f04  
05:f02 

# save to 0, 1 = counter 

06:0d0  
07:0e1

08:f0e 
09:00f
0a:01e
0b:f0e

# use register f in standard register set for return stack
# use "marker" labels 

0c:11f # move "return marker 1" top top of return stack (F); marker 1 -> 0d 

# parameters were prepared, do the call

0d:c22 # goto sum(n); "recursive" call 

# returned; result in d, c; decode and display

0e:f0e
0f:0d2
10:0c3 
11:f0e 

# display result 

12:b90 
13:b90 
14:b90 
15:b90

16:b60

17:02d
18:03e 
19:f03 
1a:f3d 
1b:ff0 
1c:c00 

# ---------------------------
# sum(n) @ 18

22:f0e # swap in value stack 
23:91f # compare if E, F = counter = 01 ? 
24:D2b
25:90e  
26:D2b

# = 01; base case, return 01 

27:11d # sum result is in C, D !
28:10c # result
29:f0e # swap in normal bank 
2a:cb0 # goto jumpblock 

# > 01; rec call and add 

# create 2 value stack entries

2b:f0e # restore normal registers subprogram call with ret 
2c:b70 # shift value stack down
2d:b70 # and do this 4 times 
2e:b70 # for two 2x4 variables 
2f:b70 # (counter and sum) 

# swap in upper bank to put values on value stack

30:f0e # swap in upper values bank 
31:0bf # copy "n" value 
32:0ae  
33:71f # sub 1 from n -> n-1 
34:fce # underflow from F into E if needed 
35:f0e # normal registers back 

36:b50 # shift return stack down 
37:12f # push "return marker 2" onto return stack top (F); marker 2 -> 2f

# parameters were prepared, do the call

38:c22 # goto sum(n); recursive call "sum(n-1)" 

# copy current sum to next frame for addition

39:f0e # swap upper register bank 
3a:0d9 # copy D -> 9
3b:0c8 # copy C -> 8 
3c:f0e # normal registers back 

3d:b90 # shift value stack up
3e:b90 # pop value stack 4 times 
3f:b90
40:b90

41:f0e # do the addition of n + sum(n-1) 
42:4fd # add current counter in F, E, n to D, E 
43:fbc # do the carry 
44:4ec 
45:f0e 

46:b60 # shift return stack up

47:cb0 # goto jumpblock  ; return 

# ---------------------------
### helper routines

# return stack shift down: 

50:098
51:0a9
52:0ba
53:0cb
54:0dc
55:0ed
56:0fe
57:f07 

# return stack shift up: 

60:0ef
61:0de
62:0cd 
63:0bc
64:0ab
65:09a
66:089 
67:f07 

# value stack shift down: 

70:f0e
71:f0d 
72:010
73:021
74:032
75:043
76:054
77:065
78:076
79:087
7a:098
7b:0a9
7c:0ba
7d:0cb
7e:0dc
7f:0ed
80:0fe 
81:f0d
82:f0e
83:f07 # ret 

# value stack shift up: 

90:f0e
91:f0d
92:0ef
93:0de
94:0cd
95:0bc
96:0ab
97:09a
98:089
99:078
9a:067
9b:056
9c:045
9d:034
9e:023
9f:012
a0:001
a1:f0d
a2:f0e
a3:f07 # ret 

# jump block

b0:91F # marker 1 ?
b1:E0E # goto 0E
b2:92F # marker 2 ?
b3:E39 # goto 39
b4:F00 # error

